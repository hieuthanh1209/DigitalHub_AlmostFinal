@model IEnumerable<DigitalHub.Models.Product>

@{
    ViewBag.Title = "DigitalHub";
    Layout = "~/Views/Shared/_MasterLayout.cshtml";
}
<link rel="stylesheet" href="~/Content/bootstrap.min.css" />
<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css" rel="stylesheet" />
<link href="~/Content/mystyle.css" rel="stylesheet" />

<!-- Slider Section -->
<div id="slider-section" class="container py-2 pt-5 bg-info rounded-3" style="width: 90%;">
    <div class="row">
        <div class="col-12 position-relative">
            <div id="productSlider" class="carousel slide" data-bs-ride="carousel">
                <div class="carousel-inner">
                    @{
                        // Giả sử bạn có một danh sách chứa index hoặc ID của các sản phẩm bạn muốn hiển thị
                        var selectedIndexes = new List<int> { 0, 1, 2, 4, 6, 10, 11, 28, 29, 36 }; // Các index của sản phẩm bạn muốn lấy
                        var products = selectedIndexes.Select(index => Model.ElementAt(index)).ToList(); // Lấy 10 sản phẩm theo các index trên
                    }

                    @for (int i = 0; i < products.Count; i += 5)
                    {
                        <div class="carousel-item @(i == 0 ? "active" : "")">
                            <div class="row justify-content-center">
                                @for (int j = i; j < i + 5 && j < products.Count; j++)
                                {
                                    var product = products[j];

                                    <!-- Chỉnh sửa thêm Bootstrap Grid classes để đảm bảo thẻ xếp cạnh nhau -->
                                    <div class="col-6 col-md-4 col-lg-2">
                                        <div class="card product-card m-1 position-relative d-flex flex-column">
                                            @if (product.DiscountPrice.HasValue && product.Price.HasValue && product.DiscountPrice < product.Price)
                                            {
                                                var discount = Math.Round(((product.Price.Value - product.DiscountPrice.Value) / product.Price.Value * 100), 0);
                                                <div class="discount-badge">-@discount%</div>
                                            }

                                            <!-- Wishlist Icon -->
                                            <div class="wishlist-icon" onclick="toggleWishlist(event, this)">
                                                <i class="fas fa-heart"></i>
                                            </div>

                                            <div class="image-container">
                                                <a href="@Url.Action("Details", "Home", new { id = product.ProductID })">
                                                    <img class="card-img-top" src="~/Images/@product.Category1.NameCate/@product.ImagePro" alt="Product Image">
                                                </a>
                                            </div>

                                            <div class="card-body">
                                                <div class="card-title">
                                                    <a href="@Url.Action("Details", "Home", new { id = product.ProductID })">
                                                        @{
                                                            var namePro = product.NamePro;
                                                            var displayText = namePro.Length > 30 ? namePro.Substring(0, 30) + "..." : namePro;
                                                        }
                                                        @displayText
                                                    </a>
                                                </div>

                                                <div class="price-section">
                                                    <a href="@Url.Action("Details", "Home", new { id = product.ProductID })" class="text-decoration-none">
                                                        <p class="discount_price text-danger fw-bold">
                                                            @String.Format("{0:N0}", product.DiscountPrice).Replace(",", ".")đ
                                                        </p>
                                                        <p class="price text-muted text-decoration-line-through">
                                                            @String.Format("{0:N0}", product.Price).Replace(",", ".")đ
                                                        </p>
                                                    </a>
                                                </div>
                                                <div class="rating">
                                                    <div class="stars">
                                                        <span id="ratingValue-@product.NamePro"></span>
                                                        <i class="fas fa-star" style="color: rgb(255,193,7)"></i>
                                                    </div>
                                                    <span class="count">(123)</span>
                                                </div>
                                            </div>
                                        </div>
                                    </div> <!-- End col- -->
                                }
                            </div> <!-- End row -->
                        </div> <!-- End carousel-item -->
                    }
                </div>
                <button class="carousel-control-prev" type="button" data-bs-target="#productSlider" data-bs-slide="prev">
                    <span class="carousel-control-prev-icon bg-dark rounded-circle" aria-hidden="true"></span>
                    <span class="visually-hidden">Previous</span>
                </button>
                <button class="carousel-control-next" type="button" data-bs-target="#productSlider" data-bs-slide="next">
                    <span class="carousel-control-next-icon bg-dark rounded-circle" aria-hidden="true"></span>
                    <span class="visually-hidden">Next</span>
                </button>
            </div>
        </div>
    </div>
</div>


<!-- Main Content Section -->
<h2 class="text-center mt-4">Sản phẩm bán chạy</h2>
<div id="content-section" class="container mt-4">
    <div class="row">
        @foreach (var item in Model)
        {
            <div class="col-6 col-md-4 col-lg-2 mb-4" id="product-card-@item.ProductID">
                <div class="card h-100 shadow-sm position-relative">
                    @if (item.DiscountPrice.HasValue && item.Price.HasValue && item.DiscountPrice < item.Price)
                    {
                        var discount = Math.Round(((item.Price.Value - item.DiscountPrice.Value) / item.Price.Value * 100), 0);
                        <div class="discount-badge">-@discount%</div>
                    }

                    <div class="custom-label">Trả góp 0%</div>

                    <!-- Wishlist Icon -->
                    <div class="wishlist-icon" onclick="toggleWishlist(event, this)">
                        <i class="fas fa-heart"></i>
                    </div>

                    <!-- Product Image -->
                    <div class="image-container">
                        <a href="@Url.Action("Details", "Home", new { id = item.ProductID })">
                            <img class="card-img-top" src="~/Images/@item.Category1.NameCate/@item.ImagePro" alt="Product Image">
                        </a>
                    </div>

                    <!-- Card Body -->
                    <div class="card-body d-flex flex-column">
                        <a href="@Url.Action("Details", "Home", new { id = item.ProductID })" class="text-decoration-none">
                            <p class="card-title text-dark text-decoration-none">
                                @(item.NamePro.Length > 35 ? item.NamePro.Substring(0, 30) + "..." : item.NamePro)
                            </p>
                        </a>

                        <div class="mb-2">
                            <p class="discount_price text-danger fw-bold mb-0">@String.Format("{0:N0}", item.DiscountPrice).Replace(",", ".")đ</p>
                            <p class="old-price text-muted text-decoration-line-through mb-0">@String.Format("{0:N0}", item.Price).Replace(",", ".")đ</p>
                        </div>

                        <p class="text-muted" style="font-size: 0.8rem;">Không phí chuyển đổi khi trả góp 0% qua thẻ tín dụng kỳ hạn 3-6 tháng</p>
                        <p class="rating text-warning mt-2 mb-0">
                            <span id="ratingValue-@item.NamePro" style="color: #ee4d2d"></span> <i class="fas fa-star"></i>
                        </p>
                    </div>
                </div>
            </div>
        }
    </div>
</div>


<script>

    function toggleWishlist(event, element) {
        event.stopPropagation(); // Ngăn chặn sự kiện nhấn vào thẻ cha (bao gồm thẻ <a>)
        element.classList.toggle('active');

        // Thêm hiệu ứng click
        element.classList.add('clicked');
        setTimeout(() => {
            element.classList.remove('clicked');
        }, 500); // Thời gian khớp với thời gian hiệu ứng sparkle
    }


    window.onload = function () {
        generateRandomRatings();
    };
    function generateRandomRatings() {
        const ratingElements = document.querySelectorAll('[id^="ratingValue-"]');
        ratingElements.forEach(element => {
            const rating = (Math.random() * 4 + 1).toFixed(1);
            element.textContent = rating;
        });
    }

    window.onload = function () {
        generateRandomRatings();
    };
</script>
